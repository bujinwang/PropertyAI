// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  firstName           String
  lastName            String
  phone               String?
  role                UserRole             @default(TENANT)
  mfaEnabled          Boolean              @default(false)
  mfaSecret           String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isActive            Boolean              @default(true)
  passwordResetToken  String?
  passwordResetExpires DateTime?
  propertiesManaged   Property[]           @relation("PropertyManager")
  propertiesOwned     Property[]           @relation("PropertyOwner")
  units               Unit[]               @relation("UnitTenant")
  documents           Document[]
  maintenanceRequests MaintenanceRequest[] @relation("RequestedBy")
  sentMessages        Message[]            @relation("SentMessages")
  receivedMessages    Message[]            @relation("ReceivedMessages")
  notifications       Notification[]
  listings            Listing[]
  applications        Application[]
  oauthConnections    OAuthConnection[]
  vendorPerformanceRatings VendorPerformanceRating[]
  auditEntries             AuditEntry[]
  leases              Lease[]
}

enum UserRole {
  ADMIN
  PROPERTY_MANAGER
  TENANT
  USER
}

// Property model
model Property {
  id                  String               @id @default(uuid())
  name                String
  address             String
  city                String
  state               String
  zipCode             String
  country             String
  description         String?
  propertyType        PropertyType
  yearBuilt           Int?
  totalUnits          Int
  amenities           Json? // Stores amenities as JSON
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isActive            Boolean              @default(true)
  manager             User                 @relation("PropertyManager", fields: [managerId], references: [id])
  managerId           String
  owner               User                 @relation("PropertyOwner", fields: [ownerId], references: [id])
  ownerId             String
  units               Unit[]
  documents           Document[]
  maintenanceRequests MaintenanceRequest[]
  images              PropertyImage[] // Relation to property images
  latitude            Float?
  longitude           Float?
  listings            Listing[]
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  COMMERCIAL
  INDUSTRIAL
  OTHER
}

// PropertyImage model for storing property images
model PropertyImage {
  id               Int      @id @default(autoincrement())
  propertyId       String
  property         Property @relation(fields: [propertyId], references: [id])
  filename         String // Stored filename
  originalFilename String // Original filename when uploaded
  mimetype         String // File MIME type
  size             Int // File size in bytes
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false) // Is this the main/featured image
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Unit model
model Unit {
  id                  String               @id @default(uuid())
  unitNumber          String
  floorNumber         Int?
  size                Float? // in square feet/meters
  bedrooms            Int?
  bathrooms           Float? // 1.5, 2, etc.
  rent                Float?
  deposit             Float?
  isAvailable         Boolean              @default(true)
  dateAvailable       DateTime?
  features            Json? // Stores features as JSON
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  property            Property             @relation(fields: [propertyId], references: [id])
  propertyId          String
  tenant              User?                @relation("UnitTenant", fields: [tenantId], references: [id])
  tenantId            String?
  lease               Lease?
  maintenanceRequests MaintenanceRequest[]
  images              UnitImage[] // Relation to unit images
  listing             Listing?
}

// UnitImage model for storing unit images
model UnitImage {
  id               Int      @id @default(autoincrement())
  unitId           String
  unit             Unit     @relation(fields: [unitId], references: [id])
  filename         String // Stored filename
  originalFilename String // Original filename when uploaded
  mimetype         String // File MIME type
  size             Int // File size in bytes
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false) // Is this the main/featured image
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Lease model
model Lease {
  id              String        @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  leaseTerms      String?       @db.Text
  status          LeaseStatus   @default(ACTIVE)
  signedDate      DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  unit            Unit          @relation(fields: [unitId], references: [id])
  unitId          String        @unique
  tenant          User          @relation(fields: [tenantId], references: [id])
  tenantId        String
  documents       Document[]
  transactions    Transaction[]
  renewalDate     DateTime?
}

enum LeaseStatus {
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

// Document model
model Document {
  id                   String              @id @default(uuid())
  name                 String
  type                 DocumentType
  url                  String // S3 or other storage URL
  uploadedAt           DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  description          String?
  property             Property?           @relation(fields: [propertyId], references: [id])
  propertyId           String?
  lease                Lease?              @relation(fields: [leaseId], references: [id])
  leaseId              String?
  uploadedBy           User                @relation(fields: [uploadedById], references: [id])
  uploadedById         String
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String?
  size                 Int? // Size in bytes
  mimeType             String?
  isArchived           Boolean             @default(false)
}

enum DocumentType {
  LEASE
  INVOICE
  RECEIPT
  MAINTENANCE_REPORT
  PROPERTY_PHOTO
  CONTRACT
  OTHER
}

// Maintenance request model
model MaintenanceRequest {
  id            String            @id @default(uuid())
  title         String
  description   String
  status        MaintenanceStatus @default(OPEN)
  priority      Priority          @default(MEDIUM)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  scheduledDate DateTime?
  completedDate DateTime?
  notes         String?           @db.Text
  property      Property          @relation(fields: [propertyId], references: [id])
  propertyId    String
  unit          Unit              @relation(fields: [unitId], references: [id])
  unitId        String
  requestedBy   User              @relation("RequestedBy", fields: [requestedById], references: [id])
  requestedById String
  assignedToId  String?
  estimatedCost Float?
  actualCost    Float?
  documents     Document[]
  messages      Message[]
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

// Message model
model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  sender      User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User   @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String

  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String?
}

// Notification model
model Notification {
  id          String           @id @default(uuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  relatedId   String? // ID of related item (e.g., maintenance request)
  relatedType String? // Type of related item
}

enum NotificationType {
  MAINTENANCE
  LEASE
  PAYMENT
  ANNOUNCEMENT
  OTHER
}

// Transaction model
model Transaction {
  id            String            @id @default(uuid())
  amount        Float
  type          TransactionType
  status        TransactionStatus @default(PENDING)
  description   String?
  createdAt     DateTime          @default(now())
  processedAt   DateTime?
  lease         Lease             @relation(fields: [leaseId], references: [id])
  leaseId       String
  paymentMethod String?
  reference     String? // External reference number
}

enum TransactionType {
  RENT
  DEPOSIT
  FEES
  MAINTENANCE
  REFUND
  OTHER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

// Add MessageReference model if needed
model MessageReference {
  id             String   @id @default(uuid())
  mongoMessageId String // The _id from MongoDB
  createdAt      DateTime @default(now())
}

// Listing model for marketing and syndication
model Listing {
  id          String              @id @default(uuid())
  title       String
  description String              @db.Text
  price       Float
  status      ListingStatus       @default(DRAFT)
  publishedAt DateTime?
  expiresAt   DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  property    Property            @relation(fields: [propertyId], references: [id])
  propertyId  String
  unit        Unit                @relation(fields: [unitId], references: [id])
  unitId      String              @unique
  author      User                @relation(fields: [authorId], references: [id])
  authorId    String
  images      ListingImage[]
  campaigns   MarketingCampaign[]
  publishedListings PublishedListing[]
  aiListingSuggestions AIListingSuggestion[]
  aiPricingSuggestions AIPricingSuggestion[]
  applications         Application[]
}

enum ListingStatus {
  DRAFT
  ACTIVE
  INACTIVE
  EXPIRED
  RENTED
}

// ListingImage model for storing listing-specific images
model ListingImage {
  id         Int      @id @default(autoincrement())
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  url        String
  isFeatured Boolean  @default(false)
  createdAt  DateTime @default(now())
  analysis   AIImageAnalysis?
}

// MarketingCampaign model
model MarketingCampaign {
  id        String              @id @default(uuid())
  name      String
  platform  String // e.g., Zillow, Craigslist, Facebook
  budget    Float?
  startDate DateTime
  endDate   DateTime?
  status    CampaignStatus      @default(PLANNED)
  listing   Listing             @relation(fields: [listingId], references: [id])
  listingId String
  analytics CampaignAnalytics[]
}

enum CampaignStatus {
  PLANNED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// CampaignAnalytics model
model CampaignAnalytics {
  id          String            @id @default(uuid())
  impressions Int?
  clicks      Int?
  conversions Int?
  cost        Float?
  recordedAt  DateTime          @default(now())
  campaign    MarketingCampaign @relation(fields: [campaignId], references: [id])
  campaignId  String
}

model PublishedListing {
  id          String    @id @default(cuid())
  listingId   String
  listing     Listing   @relation(fields: [listingId], references: [id])
  platform    String // e.g., Zillow, Realtor.com
  publishedAt DateTime  @default(now())
  status      String    @default("ACTIVE") // e.g., ACTIVE, INACTIVE, EXPIRED
  externalId  String?   @unique

  @@unique([listingId, platform])
}

model AIListingSuggestion {
  id        String   @id @default(cuid())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  title     String?
  description String?
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AIPricingSuggestion {
  id        String   @id @default(cuid())
  listingId String
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  suggestedPrice Float
  confidenceScore Float
  reasoning String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AIImageAnalysis {
  id          String   @id @default(cuid())
  imageId     Int      @unique
  image       ListingImage @relation(fields: [imageId], references: [id])
  tags        String[]
  description String?
  objects     Json?
  colors      Json?
  quality     Float?
  createdAt   DateTime @default(now())
}

model Application {
  id          String   @id @default(cuid())
  listingId   String
  listing     Listing  @relation(fields: [listingId], references: [id])
  applicantId String
  applicant   User     @relation(fields: [applicantId], references: [id])
  status      ApplicationStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  backgroundChecks BackgroundCheck[]
}

model OAuthConnection {
  id           String   @id @default(cuid())
  provider     PublishingPlatform
  providerUserId String
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  expiresAt    DateTime?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([provider, userId])
}

enum PublishingPlatform {
  ZILLOW
  REALTOR
  FACEBOOK
  CRAIGSLIST
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model MarketData {
  id          String   @id @default(cuid())
  propertyId  String?
  listingId   String?
  date        DateTime
  source      String // e.g., Zillow, Redfin, manual
  price       Float
  pricePerSqFt Float?
  bedrooms    Int?
  bathrooms   Float?
  zipCode     String
  city        String
  state       String
  propertyType PropertyType?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KnowledgeBaseEntry {
  id        String   @id @default(cuid())
  intent    String   @unique
  response  String   @db.Text
  category  String
  keywords  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendorPerformanceRating {
  id          String    @id @default(cuid())
  vendorId    String
  workOrderId String
  metricId    String
  score       Int
  comments    String?
  ratedBy     User      @relation(fields: [ratedById], references: [id])
  ratedById   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model AuditEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  details   String?
  createdAt DateTime @default(now())
}

model BackgroundCheck {
  id            String    @id @default(cuid())
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
  vendor        String
  vendorId      String
  status        String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model PerformanceMetric {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  weight      Float
  scaleType   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
