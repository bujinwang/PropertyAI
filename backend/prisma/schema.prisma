// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id                       String                    @id @default(uuid())
  email                    String                    @unique
  password                 String
  firstName                String
  lastName                 String
  phone                    String?
  // This 'role' field uses an enum for a simple, single-role system.
  // It defaults to TENANT.
  role                     UserRole                  @default(TENANT)
  mfaEnabled               Boolean                   @default(false)
  mfaSecret                String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  lastLogin                DateTime?
  isActive                 Boolean                   @default(true)
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  failedLoginAttempts      Int                       @default(0)
  isLocked                 Boolean                   @default(false)
  lockedUntil              DateTime?
  lastLockedAt             DateTime?
  propertiesManaged        Property[]                @relation("PropertyManager")
  propertiesOwned          Property[]                @relation("PropertyOwner")
  units                    Unit[]                    @relation("UnitTenant")
  documents                Document[]
  maintenanceRequests      MaintenanceRequest[]      @relation("RequestedBy")
  sentMessages             Message[]                 @relation("SentMessages")
  receivedMessages         Message[]                 @relation("ReceivedMessages")
  notifications            Notification[]
  listings                 Listing[]
  applications             Application[] @relation("ApplicantApplications")
  oauthConnections         OAuthConnection[]
  vendorPerformanceRatings VendorPerformanceRating[]
  auditEntries             AuditEntry[]
  leases                   Lease[]
  vendor                   Vendor?
  tenantIssuePredictions   TenantIssuePrediction[]
  escalationPolicyRules    EscalationPolicyRule[]
  onCallRotations          OnCallRotation[]
  apiKeys                  ApiKey[]
  // This 'roles' field establishes a many-to-many relationship with the Role model.
  // A user can have multiple roles, and a role can be assigned to many users.
  // Prisma implicitly creates a join table named `_RoleToUser` to manage this.
  roles                    Role[]
  consents                 Consent[]
  settings                 Json? // New field to store user settings as JSON
  refreshToken             String?
  pushToken                String?
  stripeCustomerId         String?                   @unique
  devices                  Device[]
  tenantRatings            TenantRating[]            @relation("RatedTenant")
  ratedTenantRatings       TenantRating[]            @relation("Rater")
  WhiteLabelConfig         WhiteLabelConfig[]
  approvedTransactions     Transaction[]     @relation("ApprovedTransactions")
  approvedVendorPayments   VendorPayment[]   @relation("ApprovedVendorPayments")
  aiUsageLogs              AIUsageLog[]
  oauthAccessTokens        OAuthAccessToken[]
  passwordResetTokens      PasswordResetToken[]

  reviewedUX           UXReview[]        @relation("ReviewedUX")
  authoredUXComments   UXReviewComment[] @relation("AuthoredUXComment")
  assignedUXReviews    UXReviewAssignment[] @relation("AssignedUXReview")
  createdUXSurveys     UXSurvey[]        @relation("CreatedUXSurvey")
  respondedUXSurveys   UXSurveyResponse[] @relation("RespondedUXSurvey")

  @@index([role])
  @@index([isActive])
  @@index([email])
}

model Consent {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String // e.g., 'marketing', 'terms_of_service'
  agreedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
  @@index([userId])
}

enum UserRole {
  ADMIN
  PROPERTY_MANAGER
  TENANT
  USER
  VENDOR
  OWNER
}

// Property model
model Property {
  id                  String               @id @default(uuid())
  name                String
  address             String
  city                String
  state               String
  zipCode             String
  country             String
  description         String?
  propertyType        PropertyType
  yearBuilt           Int?
  totalUnits          Int
  amenities           Json? // Stores amenities as JSON
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isActive            Boolean              @default(true)
  manager             User                 @relation("PropertyManager", fields: [managerId], references: [id])
  managerId           String
  owner               User                 @relation("PropertyOwner", fields: [ownerId], references: [id])
  ownerId             String
  units               Unit[]
  documents           Document[]
  maintenanceRequests MaintenanceRequest[]
  images              PropertyImage[] // Relation to property images
  latitude            Float?
  longitude           Float?
  listings            Listing[]
  businessHours       BusinessHours[]
  emergencyProtocols  EmergencyProtocol[]
  escalationPolicies  EscalationPolicy[]
  onCallSchedules     OnCallSchedule[]
  whiteLabelConfig    WhiteLabelConfig?    @relation(fields: [whiteLabelConfigId], references: [id])
  whiteLabelConfigId  String?

  @@index([city])
  @@index([state])
  @@index([zipCode])
  @@index([propertyType])
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  COMMERCIAL
  INDUSTRIAL
  OTHER
}

// PropertyImage model for storing property images
model PropertyImage {
  id               Int      @id @default(autoincrement())
  propertyId       String
  property         Property @relation(fields: [propertyId], references: [id])
  filename         String // Stored filename
  originalFilename String // Original filename when uploaded
  mimetype         String // File MIME type
  size             Int // File size in bytes
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false) // Is this the main/featured image
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  listingImages    ListingImage[] @relation("PropertyImageToListingImage")
}

// Unit model
model Unit {
  id                    String                  @id @default(uuid())
  unitNumber            String
  floorNumber           Int?
  size                  Float? // in square feet/meters
  bedrooms              Int?
  bathrooms             Float? // 1.5, 2, etc.
  rent                  Float?
  deposit               Float?
  isAvailable           Boolean                 @default(true)
  dateAvailable         DateTime?
  features              Json? // Stores features as JSON
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  property              Property                @relation(fields: [propertyId], references: [id])
  propertyId            String
  tenant                User?                   @relation("UnitTenant", fields: [tenantId], references: [id])
  tenantId              String?
  lease                 Lease?
  maintenanceRequests   MaintenanceRequest[]
  images                UnitImage[] // Relation to unit images
  listing               Listing?                @relation("ListingToUnit", fields: [listingId], references: [id])
  listingId             String?                 @unique
  predictiveMaintenance PredictiveMaintenance[]
  appliances            Appliance[]

  @@index([isAvailable])
  @@index([rent])
}

// ListingImage model for storing images associated with a listing
model ListingImage {
  id               String   @id @default(uuid())
  listingId        String
  listing          Listing  @relation("ListingToImages", fields: [listingId], references: [id])
  propertyImageId  Int?
  propertyImage    PropertyImage? @relation("PropertyImageToListingImage", fields: [propertyImageId], references: [id])
  unitImageId      Int?
  unitImage        UnitImage? @relation("UnitImageToListingImage", fields: [unitImageId], references: [id])
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([listingId])
  @@index([propertyImageId])
  @@index([unitImageId])
}

model Appliance {
  id        String   @id @default(uuid())
  name      String
  type      String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// UnitImage model for storing unit images
model UnitImage {
  id               Int      @id @default(autoincrement())
  unitId           String
  unit             Unit     @relation(fields: [unitId], references: [id])
  filename         String // Stored filename
  originalFilename String // Original filename when uploaded
  mimetype         String // File MIME type
  size             Int // File size in bytes
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false) // Is this the main/featured image
  createdAt        DateTime @default(now())
  listingImages    ListingImage[] @relation("UnitImageToListingImage")
  updatedAt        DateTime @updatedAt
}

// Lease model
model Lease {
  id              String         @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  leaseTerms      String?        @db.Text
  status          LeaseStatus    @default(ACTIVE)
  signedDate      DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  unit            Unit           @relation(fields: [unitId], references: [id])
  unitId          String         @unique
  tenant          User           @relation(fields: [tenantId], references: [id])
  tenantId        String
  documents       Document[]
  transactions    Transaction[]
  renewalDate     DateTime?
  ratings         TenantRating[]
}

enum LeaseStatus {
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

// Document model
model Document {
  id                   String              @id @default(uuid())
  name                 String
  type                 DocumentType
  url                  String // S3 or other storage URL
  cdnUrl               String? // CDN URL for optimized delivery
  key                  String? // S3 key for direct access
  thumbnailUrl         String? // Thumbnail URL for images
  thumbnailCdnUrl      String? // CDN thumbnail URL
  uploadedAt           DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  description          String?
  property             Property?           @relation(fields: [propertyId], references: [id])
  propertyId           String?
  lease                Lease?              @relation(fields: [leaseId], references: [id])
  leaseId              String?
  uploadedBy           User                @relation(fields: [uploadedById], references: [id])
  uploadedById         String
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String?
  size                 Int? // Size in bytes
  mimeType             String?
  isArchived           Boolean             @default(false)
}

enum DocumentType {
  LEASE
  INVOICE
  RECEIPT
  MAINTENANCE_REPORT
  PROPERTY_PHOTO
  CONTRACT
  OTHER
}

model Vendor {
  id                      String                    @id @default(uuid())
  name                    String
  contactPerson           User?                     @relation(fields: [contactPersonId], references: [id])
  contactPersonId         String?                   @unique
  phone                   String
  email                   String                    @unique
  address                 String
  specialty               String // e.g., Plumbing, Electrical
  workOrders              WorkOrderAssignment[]
  quotes                  WorkOrderQuote[]
  emergencyRoutingRules   EmergencyRoutingRule[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  serviceAreas            String[]
  availability            String
  certifications          String[]
  standardRate            Float?
  latitude                Float?
  longitude               Float?
  workload                Int                       @default(0) // Number of active work orders
  hourlyRate              Float?
  stripeAccountId         String?                   @unique // For Stripe Connect payouts
  payments                VendorPayment[]
  VendorPerformanceRating VendorPerformanceRating[]
}

enum VendorAvailability {
  AVAILABLE
  UNAVAILABLE
  ON_VACATION
}

model WorkOrder {
  id                      String                    @id @default(uuid())
  title                   String
  description             String
  status                  WorkOrderStatus           @default(OPEN)
  priority                Priority
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  completedAt             DateTime?
  maintenanceRequest      MaintenanceRequest        @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId    String                    @unique
  assignments             WorkOrderAssignment[]
  quotes                  WorkOrderQuote[]
  costEstimation          CostEstimation?
  scheduledEvent          ScheduledEvent?
  vendorPayments          VendorPayment[]
  VendorPerformanceRating VendorPerformanceRating[]
}

enum WorkOrderStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model WorkOrderAssignment {
  id          String    @id @default(uuid())
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId String
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  vendorId    String
  assignedAt  DateTime  @default(now())
  notes       String?
}

model WorkOrderQuote {
  id          String      @id @default(uuid())
  workOrder   WorkOrder   @relation(fields: [workOrderId], references: [id])
  workOrderId String
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  vendorId    String
  amount      Float
  details     String?
  status      QuoteStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FollowUp {
  id         String   @id @default(cuid())
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  String   @unique
  status     String
  followUpAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhiteLabelConfig {
  id           String     @id @default(cuid())
  token        String     @unique
  platform     String // 'ios' or 'android'
  appName      String?
  logoUrl      String?
  primaryColor String?
  secondaryColor String?
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Property     Property[]

  @@index([userId])
}

model TenantRating {
  id        String   @id @default(cuid())
  leaseId   String
  lease     Lease    @relation(fields: [leaseId], references: [id])
  tenantId  String
  tenant    User     @relation("RatedTenant", fields: [tenantId], references: [id])
  raterId   String
  rater     User     @relation("Rater", fields: [raterId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([leaseId])
  @@index([tenantId])
  @@index([raterId])
}

model OnCallSchedule {
  id          String           @id @default(cuid())
  name        String
  description String?
  property    Property         @relation(fields: [propertyId], references: [id])
  propertyId  String
  rotations   OnCallRotation[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model OnCallRotation {
  id         String         @id @default(cuid())
  schedule   OnCallSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Maintenance request model
model MaintenanceRequest {
  id            String                      @id @default(uuid())
  title         String
  description   String
  status        MaintenanceStatus           @default(OPEN)
  priority      Priority                    @default(MEDIUM)
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  scheduledDate DateTime?
  completedDate DateTime?
  notes         String?                     @db.Text
  property      Property                    @relation(fields: [propertyId], references: [id])
  propertyId    String
  unit          Unit                        @relation(fields: [unitId], references: [id])
  unitId        String
  requestedBy   User                        @relation("RequestedBy", fields: [requestedById], references: [id])
  requestedById String
  workOrder     WorkOrder?
  estimatedCost Float?
  actualCost    Float?
  documents     Document[]
  messages      Message[]
  photoAnalysis PhotoAnalysis?
  category      MaintenanceRequestCategory? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  responseTime  MaintenanceResponseTime?

  @@index([status])
  @@index([priority])
  @@index([propertyId])
  @@index([unitId])
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum Sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  permissions Permission[]
  // This 'users' field is the other side of the many-to-many relationship with the User model.
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OAuthConnection {
  id          String   @id @default(uuid())
  provider    String
  providerId  String
  accessToken String
  refreshToken String?
  expiresAt   DateTime?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([provider, providerId])
  @@index([userId])
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime?
  isActive  Boolean  @default(true)
  name      String?
  
  @@index([userId])
}

model BackgroundCheck {
  id          String   @id @default(uuid())
  applicantId String @unique
  applicant   Application @relation(fields: [applicantId], references: [id])
  status      String // e.g., 'pending', 'completed', 'failed'
  reportUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([applicantId])
}

model AuditEntry {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  action    String
  entityType String
  entityId  String
  timestamp DateTime @default(now())
  details   Json?

  @@index([userId])
  @@index([entityType])
  @@index([entityId])
}

model Message {
  id                 String    @id @default(uuid())
  senderId           String
  sender             User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId         String
  receiver           User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content            String    @db.Text
  sentAt             DateTime  @default(now())
  readAt             DateTime?
  conversationId     String? // New field for conversation grouping
  maintenanceRequest MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String?
  followUp           FollowUp?

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  type      String // e.g., 'new_message', 'maintenance_update'
  message   String    @db.Text
  isRead    Boolean   @default(false)
  createdAt DateTime  @default(now())
  link      String? // Optional link to related resource
  
  @@index([userId])
  @@index([isRead])
}

model Listing {
  id               String         @id @default(uuid())
  propertyId       String
  property         Property       @relation(fields: [propertyId], references: [id])
  unitId           String?        @unique
  unit             Unit?          @relation("ListingToUnit")
  title            String
  description      String         @db.Text
  rent             Float
  availableDate    DateTime
  leaseTerms       String?        @db.Text
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  createdBy        User           @relation(fields: [createdById], references: [id])
  images           ListingImage[] @relation("ListingToImages")
  createdById      String
  viewCount        Int            @default(0)
  status           ListingStatus  @default(ACTIVE)
  slug             String         @unique @default(cuid())
  applications     Application[]
}

enum ListingStatus {
  ACTIVE
  PENDING
  DRAFT
  ARCHIVED
}

model Application {
  id                String          @id @default(uuid())
  listingId         String
  listing           Listing         @relation(fields: [listingId], references: [id])
  applicantId       String
  applicant         User            @relation("ApplicantApplications", fields: [applicantId], references: [id])
  status            ApplicationStatus @default(PENDING)
  appliedDate       DateTime        @default(now())
  notes             String?         @db.Text
  backgroundCheck   BackgroundCheck?
  riskAssessment    RiskAssessment?
  screening         Screening?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([listingId, applicantId])
  @@index([status])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}

model MarketData {
  id          String   @id @default(uuid())
  location    String
  averageRent Float
  vacancyRate Float
  dataDate    DateTime @default(now())
  propertyType PropertyType? // Optional: to specify market data for a certain property type
  bedrooms    Int? // Optional: to specify market data for a certain number of bedrooms
  
  @@unique([location, dataDate, propertyType, bedrooms])
  @@index([location])
  @@index([dataDate])
}

model OAuthAccessToken {
  id          String   @id @default(uuid())
  accessToken String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model AIImageAnalysis {
  id          String   @id @default(uuid())
  imageId     String   @unique
  analysisResult Json? // Stores the JSON result from AI analysis
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KnowledgeBaseEntry {
  id        String   @id @default(uuid())
  question  String   @db.Text
  answer    String   @db.Text
  category  String?
  keywords  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
}

model VendorPerformanceRating {
  id        String   @id @default(uuid())
  vendorId  String
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  workOrderId String
  workOrder WorkOrder @relation(fields: [workOrderId], references: [id])
  rating    Int // e.g., 1-5 stars
  comment   String?  @db.Text
  ratedBy   User     @relation(fields: [ratedById], references: [id])
  ratedById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([vendorId, workOrderId])
  @@index([vendorId])
  @@index([ratedById])
}

model VendorPayment {
  id              String    @id @default(uuid())
  vendorId        String
  vendor          Vendor    @relation(fields: [vendorId], references: [id])
  workOrderId     String
  workOrder       WorkOrder @relation(fields: [workOrderId], references: [id])
  amount          Float
  paymentDate     DateTime  @default(now())
  status          PaymentStatus @default(PENDING)
  transactionId   String? // Stripe transaction ID
  approvedById    String?
  approvedBy      User?     @relation("ApprovedVendorPayments", fields: [approvedById], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([vendorId])
  @@index([workOrderId])
  @@index([status])
}

enum PaymentStatus {
  PENDING
  APPROVED
  PAID
  FAILED
  REFUNDED
}

model CostEstimation {
  id          String   @id @default(uuid())
  workOrderId String   @unique
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  estimatedCost Float
  details     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PredictiveMaintenance {
  id        String   @id @default(uuid())
  unitId    String
  unit      Unit     @relation(fields: [unitId], references: [id])
  prediction Json? // Stores prediction data (e.g., next maintenance date, probability of failure)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([unitId])
}

model PhotoAnalysis {
  id                   String   @id @default(uuid())
  maintenanceRequestId String   @unique
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  analysisResult       Json? // Stores the JSON result from AI analysis
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model MaintenanceRequestCategory {
  id                   String               @id @default(uuid())
  name                 String               @unique
  description          String?
  maintenanceRequests  MaintenanceRequest[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model EmergencyRoutingRule {
  id          String   @id @default(uuid())
  priority    Priority // e.g., EMERGENCY, HIGH
  vendorId    String
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([priority])
  @@index([vendorId])
}

model MaintenanceResponseTime {
  id                   String   @id @default(uuid())
  maintenanceRequestId String   @unique
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  responseTime         Int // in minutes
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model ScheduledEvent {
  id          String   @id @default(uuid())
  workOrderId String   @unique
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Screening {
  id          String   @id @default(uuid())
  applicationId String   @unique
  application Application @relation(fields: [applicationId], references: [id])
  status      String // e.g., 'pending', 'completed', 'failed'
  reportUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([applicationId])
}

model RiskAssessment {
  id          String   @id @default(uuid())
  applicationId String   @unique
  application Application @relation(fields: [applicationId], references: [id])
  score       Float
  details     Json? // Stores detailed risk factors
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([applicationId])
}

model TenantIssuePrediction {
  id        String   @id @default(uuid())
  tenantId  String
  tenant    User     @relation(fields: [tenantId], references: [id])
  issueType String // e.g., 'late_payment', 'maintenance_abuse'
  likelihood Float // Probability or score
  predictedAt DateTime @default(now())
  resolvedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model BusinessHours {
  id         String   @id @default(uuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  dayOfWeek  Int // 0 for Sunday, 1 for Monday, etc.
  openTime   String // e.g., "09:00"
  closeTime  String // e.g., "17:00"
  isClosed   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, dayOfWeek])
}

model EmergencyProtocol {
  id          String   @id @default(uuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  name        String
  description String   @db.Text
  instructions Json? // JSON array of steps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EscalationPolicy {
  id          String   @id @default(uuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  name        String
  description String?
  rules       EscalationPolicyRule[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EscalationPolicyRule {
  id               String           @id @default(uuid())
  policyId         String
  policy           EscalationPolicy @relation(fields: [policyId], references: [id])
  order            Int
  threshold        String // e.g., "30m" for 30 minutes, "1h" for 1 hour
  action           String // e.g., "notify_manager", "create_work_order"
  assignedToUserId String?
  assignedToUser   User?            @relation(fields: [assignedToUserId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@unique([policyId, order])
}

model Transaction {
  id            String    @id @default(uuid())
  leaseId       String
  lease         Lease     @relation(fields: [leaseId], references: [id])
  amount        Float
  type          TransactionType
  transactionDate DateTime  @default(now())
  description   String?
  status        TransactionStatus @default(PENDING)
  approvedById  String?
  approvedBy    User?     @relation("ApprovedTransactions", fields: [approvedById], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([leaseId])
  @@index([type])
  @@index([status])
}

enum TransactionType {
  RENT_PAYMENT
  SECURITY_DEPOSIT
  MAINTENANCE_FEE
  REFUND
  OTHER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Device {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  deviceType String // e.g., 'mobile', 'web', 'tablet'
  os        String? // e.g., 'iOS', 'Android', 'Windows', 'macOS'
  model     String? // e.g., 'iPhone 13', 'Samsung Galaxy S21'
  pushToken String? // For push notifications
  lastLogin DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model AIUsageLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  toolName  String
  input     Json?
  output    Json?
  cost      Float?
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([toolName])
}

model UXReview {
  id              String          @id @default(uuid())
  title           String
  description     String?         @db.Text
  status          UXReviewStatus  @default(PENDING)
  priority        UXReviewPriority @default(MEDIUM)
  componentType   UXComponentType
  reviewerId      String
  reviewer        User            @relation("ReviewedUX", fields: [reviewerId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  comments        UXReviewComment[]
  assignments     UXReviewAssignment[]
  
  @@index([status])
  @@index([priority])
  @@index([componentType])
  @@index([reviewerId])
}

enum UXReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  NEEDS_REVISION
  APPROVED
  REJECTED
}

enum UXReviewPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum UXComponentType {
  DASHBOARD
  PROPERTY_PAGE
  UNIT_PAGE
  MAINTENANCE_FLOW
  LEASING_FLOW
  ONBOARDING
  SETTINGS
  OTHER
}

model UXReviewComment {
  id        String   @id @default(uuid())
  reviewId  String
  review    UXReview @relation(fields: [reviewId], references: [id])
  content   String   @db.Text
  authorId  String
  author    User     @relation("AuthoredUXComment", fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([reviewId])
  @@index([authorId])
}

model UXReviewAssignment {
  id         String   @id @default(uuid())
  reviewId   String
  review     UXReview @relation(fields: [reviewId], references: [id])
  assigneeId String
  assignee   User     @relation("AssignedUXReview", fields: [assigneeId], references: [id])
  status     UXReviewAssignmentStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([reviewId])
  @@index([assigneeId])
  @@index([status])
}

enum UXReviewAssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

model UXSurvey {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  status      SurveyStatus @default(DRAFT)
  createdBy   User         @relation("CreatedUXSurvey", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   UXSurveyQuestion[]
  responses   UXSurveyResponse[]

  @@index([status])
  @@index([createdById])
}

enum SurveyStatus {
  DRAFT
  ACTIVE
  CLOSED
  ARCHIVED
}

model UXSurveyQuestion {
  id        String   @id @default(uuid())
  surveyId  String
  survey    UXSurvey @relation(fields: [surveyId], references: [id])
  question  String   @db.Text
  type      QuestionType
  options   Json? // For multiple choice, stores array of strings
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers   UXSurveyAnswer[]

  @@index([surveyId])
}

enum QuestionType {
  TEXT
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  RATING
}

model UXSurveyResponse {
  id          String   @id @default(uuid())
  surveyId    String
  survey      UXSurvey @relation(fields: [surveyId], references: [id])
  respondentId String
  respondent  User      @relation("RespondedUXSurvey", fields: [respondentId], references: [id])
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answers     UXSurveyAnswer[]

  @@index([surveyId])
  @@index([respondentId])
}

model UXSurveyAnswer {
  id         String   @id @default(uuid())
  responseId String
  response   UXSurveyResponse @relation(fields: [responseId], references: [id])
  questionId String
  question   UXSurveyQuestion @relation(fields: [questionId], references: [id])
  value      String   @db.Text // Stores the answer value
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([responseId, questionId])
}
