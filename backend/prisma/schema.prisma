// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id                       String                    @id @default(uuid())
  email                    String                    @unique
  password                 String
  firstName                String
  lastName                 String
  phone                    String?
  // This 'role' field uses an enum for a simple, single-role system.
  // It defaults to TENANT.
  role                     UserRole                  @default(TENANT)
  mfaEnabled               Boolean                   @default(false)
  mfaSecret                String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  lastLogin                DateTime?
  isActive                 Boolean                   @default(true)
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  failedLoginAttempts      Int                       @default(0)
  isLocked                 Boolean                   @default(false)
  lockedUntil              DateTime?
  lastLockedAt             DateTime?
  propertiesManaged        Property[]                @relation("PropertyManager")
  propertiesOwned          Property[]                @relation("PropertyOwner")
  units                    Unit[]                    @relation("UnitTenant")
  documents                Document[]
  maintenanceRequests      MaintenanceRequest[]      @relation("RequestedBy")
  sentMessages             Message[]                 @relation("SentMessages")
  receivedMessages         Message[]                 @relation("ReceivedMessages")
  notifications            Notification[]
  listings                 Listing[]
  applications             Application[]
  oauthConnections         OAuthConnection[]
  vendorPerformanceRatings VendorPerformanceRating[]
  auditEntries             AuditEntry[]
  leases                   Lease[]
  vendor                   Vendor?
  tenantIssuePredictions   TenantIssuePrediction[]
  escalationPolicyRules    EscalationPolicyRule[]
  onCallRotations          OnCallRotation[]
  apiKeys                  ApiKey[]
  // This 'roles' field establishes a many-to-many relationship with the Role model.
  // A user can have multiple roles, and a role can be assigned to many users.
  // Prisma implicitly creates a join table named `_RoleToUser` to manage this.
  roles                    Role[]
  consents                 Consent[]
  settings                 Json? // New field to store user settings as JSON
  refreshToken             String?
  pushToken                String?
  stripeCustomerId         String?                   @unique
  devices                  Device[]
  tenantRatings            TenantRating[]            @relation("RatedTenant")
  ratedTenantRatings       TenantRating[]            @relation("Rater")
  WhiteLabelConfig         WhiteLabelConfig[]
  approvedTransactions     Transaction[]     @relation("ApprovedTransactions")
  approvedVendorPayments   VendorPayment[]   @relation("ApprovedVendorPayments")

  @@index([role])
  @@index([isActive])
  @@index([email])
}

enum UserRole {
  ADMIN
  PROPERTY_MANAGER
  TENANT
  USER
  VENDOR
  OWNER
}

// Property model
model Property {
  id                  String               @id @default(uuid())
  name                String
  address             String
  city                String
  state               String
  zipCode             String
  country             String
  description         String?
  propertyType        PropertyType
  yearBuilt           Int?
  totalUnits          Int
  amenities           Json? // Stores amenities as JSON
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isActive            Boolean              @default(true)
  manager             User                 @relation("PropertyManager", fields: [managerId], references: [id])
  managerId           String
  owner               User                 @relation("PropertyOwner", fields: [ownerId], references: [id])
  ownerId             String
  units               Unit[]
  documents           Document[]
  maintenanceRequests MaintenanceRequest[]
  images              PropertyImage[] // Relation to property images
  latitude            Float?
  longitude           Float?
  listings            Listing[]
  businessHours       BusinessHours[]
  emergencyProtocols  EmergencyProtocol[]
  escalationPolicies  EscalationPolicy[]
  onCallSchedules     OnCallSchedule[]
  whiteLabelConfig    WhiteLabelConfig?    @relation(fields: [whiteLabelConfigId], references: [id])
  whiteLabelConfigId  String?

  @@index([city])
  @@index([state])
  @@index([zipCode])
  @@index([propertyType])
}

enum PropertyType {
  APARTMENT
  HOUSE
  CONDO
  TOWNHOUSE
  COMMERCIAL
  INDUSTRIAL
  OTHER
}

// PropertyImage model for storing property images
model PropertyImage {
  id               Int      @id @default(autoincrement())
  propertyId       String
  property         Property @relation(fields: [propertyId], references: [id])
  filename         String // Stored filename
  originalFilename String // Original filename when uploaded
  mimetype         String // File MIME type
  size             Int // File size in bytes
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false) // Is this the main/featured image
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Unit model
model Unit {
  id                    String                  @id @default(uuid())
  unitNumber            String
  floorNumber           Int?
  size                  Float? // in square feet/meters
  bedrooms              Int?
  bathrooms             Float? // 1.5, 2, etc.
  rent                  Float?
  deposit               Float?
  isAvailable           Boolean                 @default(true)
  dateAvailable         DateTime?
  features              Json? // Stores features as JSON
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  property              Property                @relation(fields: [propertyId], references: [id])
  propertyId            String
  tenant                User?                   @relation("UnitTenant", fields: [tenantId], references: [id])
  tenantId              String?
  lease                 Lease?
  maintenanceRequests   MaintenanceRequest[]
  images                UnitImage[] // Relation to unit images
  listing               Listing?                @relation(fields: [listingId], references: [id])
  listingId             String?
  predictiveMaintenance PredictiveMaintenance[]
  appliances            Appliance[]

  @@index([isAvailable])
  @@index([rent])
}

model Appliance {
  id        String   @id @default(uuid())
  name      String
  type      String
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// UnitImage model for storing unit images
model UnitImage {
  id               Int      @id @default(autoincrement())
  unitId           String
  unit             Unit     @relation(fields: [unitId], references: [id])
  filename         String // Stored filename
  originalFilename String // Original filename when uploaded
  mimetype         String // File MIME type
  size             Int // File size in bytes
  url              String // Full URL to access the image
  isFeatured       Boolean  @default(false) // Is this the main/featured image
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Lease model
model Lease {
  id              String         @id @default(uuid())
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  leaseTerms      String?        @db.Text
  status          LeaseStatus    @default(ACTIVE)
  signedDate      DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  unit            Unit           @relation(fields: [unitId], references: [id])
  unitId          String         @unique
  tenant          User           @relation(fields: [tenantId], references: [id])
  tenantId        String
  documents       Document[]
  transactions    Transaction[]
  renewalDate     DateTime?
  ratings         TenantRating[]
}

enum LeaseStatus {
  PENDING
  ACTIVE
  EXPIRED
  TERMINATED
}

// Document model
model Document {
  id                   String              @id @default(uuid())
  name                 String
  type                 DocumentType
  url                  String // S3 or other storage URL
  cdnUrl               String? // CDN URL for optimized delivery
  key                  String? // S3 key for direct access
  thumbnailUrl         String? // Thumbnail URL for images
  thumbnailCdnUrl      String? // CDN thumbnail URL
  uploadedAt           DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  description          String?
  property             Property?           @relation(fields: [propertyId], references: [id])
  propertyId           String?
  lease                Lease?              @relation(fields: [leaseId], references: [id])
  leaseId              String?
  uploadedBy           User                @relation(fields: [uploadedById], references: [id])
  uploadedById         String
  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String?
  size                 Int? // Size in bytes
  mimeType             String?
  isArchived           Boolean             @default(false)
}

enum DocumentType {
  LEASE
  INVOICE
  RECEIPT
  MAINTENANCE_REPORT
  PROPERTY_PHOTO
  CONTRACT
  OTHER
}

model Vendor {
  id                      String                    @id @default(uuid())
  name                    String
  contactPerson           User?                     @relation(fields: [contactPersonId], references: [id])
  contactPersonId         String?                   @unique
  phone                   String
  email                   String                    @unique
  address                 String
  specialty               String // e.g., Plumbing, Electrical
  workOrders              WorkOrderAssignment[]
  quotes                  WorkOrderQuote[]
  emergencyRoutingRules   EmergencyRoutingRule[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  serviceAreas            String[]
  availability            String
  certifications          String[]
  standardRate            Float?
  latitude                Float?
  longitude               Float?
  workload                Int                       @default(0) // Number of active work orders
  hourlyRate              Float?
  stripeAccountId         String?                   @unique // For Stripe Connect payouts
  payments                VendorPayment[]
  VendorPerformanceRating VendorPerformanceRating[]
}

enum VendorAvailability {
  AVAILABLE
  UNAVAILABLE
  ON_VACATION
}

model WorkOrder {
  id                      String                    @id @default(uuid())
  title                   String
  description             String
  status                  WorkOrderStatus           @default(OPEN)
  priority                Priority
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  completedAt             DateTime?
  maintenanceRequest      MaintenanceRequest        @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId    String                    @unique
  assignments             WorkOrderAssignment[]
  quotes                  WorkOrderQuote[]
  costEstimation          CostEstimation?
  scheduledEvent          ScheduledEvent?
  vendorPayments          VendorPayment[]
  VendorPerformanceRating VendorPerformanceRating[]
}

enum WorkOrderStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

model WorkOrderAssignment {
  id          String    @id @default(uuid())
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId String
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  vendorId    String
  assignedAt  DateTime  @default(now())
  notes       String?
}

model WorkOrderQuote {
  id          String      @id @default(uuid())
  workOrder   WorkOrder   @relation(fields: [workOrderId], references: [id])
  workOrderId String
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  vendorId    String
  amount      Float
  details     String?
  status      QuoteStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FollowUp {
  id         String   @id @default(cuid())
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  String   @unique
  status     String
  followUpAt DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Language {
  id        String   @id @default(cuid())
  code      String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WhiteLabelConfig {
  id        String     @id @default(cuid())
  token     String     @unique
  platform  String // 'ios' or 'android'
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Property  Property[]

  @@index([userId])
}

model TenantRating {
  id        String   @id @default(cuid())
  leaseId   String
  lease     Lease    @relation(fields: [leaseId], references: [id])
  tenantId  String
  tenant    User     @relation("RatedTenant", fields: [tenantId], references: [id])
  raterId   String
  rater     User     @relation("Rater", fields: [raterId], references: [id])
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([leaseId])
  @@index([tenantId])
  @@index([raterId])
}

model OnCallSchedule {
  id          String           @id @default(cuid())
  name        String
  description String?
  property    Property         @relation(fields: [propertyId], references: [id])
  propertyId  String
  rotations   OnCallRotation[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model OnCallRotation {
  id         String         @id @default(cuid())
  schedule   OnCallSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  user       User           @relation(fields: [userId], references: [id])
  userId     String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum QuoteStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// Maintenance request model
model MaintenanceRequest {
  id            String                      @id @default(uuid())
  title         String
  description   String
  status        MaintenanceStatus           @default(OPEN)
  priority      Priority                    @default(MEDIUM)
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  scheduledDate DateTime?
  completedDate DateTime?
  notes         String?                     @db.Text
  property      Property                    @relation(fields: [propertyId], references: [id])
  propertyId    String
  unit          Unit                        @relation(fields: [unitId], references: [id])
  unitId        String
  requestedBy   User                        @relation("RequestedBy", fields: [requestedById], references: [id])
  requestedById String
  workOrder     WorkOrder?
  estimatedCost Float?
  actualCost    Float?
  documents     Document[]
  messages      Message[]
  photoAnalysis PhotoAnalysis?
  category      MaintenanceRequestCategory? @relation(fields: [categoryId], references: [id])
  categoryId    String?
  responseTime  MaintenanceResponseTime?

  @@index([status])
  @@index([priority])
  @@index([propertyId])
  @@index([unitId])
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum Sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  permissions Permission[]
  // This 'users' field is the other side of the many-to-many relationship with the User model.
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Message model
model Message {
  id             String     @id @default(uuid())
  content        String     @db.Text
  createdAt      DateTime   @default(now())
  isRead         Boolean    @default(false)
  sentiment      Sentiment?
  followUp       FollowUp?
  conversationId String

  sender      User   @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User   @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String

  maintenanceRequest   MaintenanceRequest? @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String?

  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Conversation {
  id        String    @id @default(cuid())
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Notification model
model Notification {
  id        String           @id @default(uuid())
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  type      NotificationType @default(GENERAL)
  user      User             @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

enum NotificationType {
  GENERAL
  MAINTENANCE
  PAYMENT
  ANNOUNCEMENT
}

// Transaction model
model Transaction {
  id            String            @id @default(uuid())
  amount        Float
  type          TransactionType
  status        TransactionStatus
  description   String?
  createdAt     DateTime          @default(now())
  processedAt   DateTime?
  paymentMethod String?
  reference     String? // External reference number
  lease         Lease             @relation(fields: [leaseId], references: [id])
  leaseId       String
  approvalStatus PaymentApprovalStatus @default(PENDING)
  approvedAt     DateTime?
  approvedBy    User?             @relation("ApprovedTransactions", fields: [approvedById], references: [id])
  approvedById  String?
}

enum TransactionType {
  RENT
  FEE
  DEPOSIT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

// Listing model
model Listing {
  id          String        @id @default(uuid())
  title       String
  description String
  rent        Float
  isAvailable Boolean       @default(true)
  dateAvailable DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  property    Property      @relation(fields: [propertyId], references: [id])
  propertyId  String
  postedBy    User          @relation(fields: [postedById], references: [id])
  postedById  String
  unit        Unit[]
  slug        String        @unique
  status      ListingStatus @default(ACTIVE)
  applications Application[]

  @@index([propertyId])
  @@index([isAvailable])
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

// Application model
model Application {
  id            String            @id @default(uuid())
  status        ApplicationStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  applicant     User              @relation(fields: [applicantId], references: [id])
  applicantId   String
  listing       Listing           @relation(fields: [listingId], references: [id])
  listingId     String
  backgroundCheck BackgroundCheck?
  riskAssessment  RiskAssessment?

  @@index([applicantId])
  @@index([listingId])
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

// MarketData model
model MarketData {
  id           String   @id @default(uuid())
  propertyId   String
  source       String // e.g., Zillow, Apartments.com
  data         Json
  recordedAt   DateTime @default(now())

  @@index([propertyId])
}

// OAuthConnection model
model OAuthConnection {
  id           String   @id @default(uuid())
  provider     String
  providerId   String
  accessToken  String
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  @@unique([provider, providerId])
  @@index([userId])
}

// AIImageAnalysis model
model AIImageAnalysis {
  id        String   @id @default(uuid())
  imageUrl  String
  analysis  Json
  createdAt DateTime @default(now())
}

// KnowledgeBaseEntry model
model KnowledgeBaseEntry {
  id        String   @id @default(uuid())
  question  String
  answer    String
  category  String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
}

// VendorPerformanceRating model
model VendorPerformanceRating {
  id          String    @id @default(uuid())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  vendorId    String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId String
  ratedBy     User      @relation(fields: [ratedById], references: [id])
  ratedById   String

  @@index([vendorId])
  @@index([workOrderId])
}

// BackgroundCheck model
model BackgroundCheck {
  id            String   @id @default(uuid())
  status        String
  report        Json
  createdAt     DateTime @default(now())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String   @unique
}

// AuditEntry model
model AuditEntry {
  id        String   @id @default(uuid())
  action    String
  details   Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
}

// MaintenanceManagement model
model MaintenanceManagement {
  id                  String   @id @default(uuid())
  preventiveMaintenance Json
  workOrderTracking     Json
  vendorManagement      Json
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// SocialMediaPlatformConfig model
model SocialMediaPlatformConfig {
  id           String @id @default(uuid())
  platformName String
  apiKey       String
  apiSecret    String
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// PredictiveMaintenance model
model PredictiveMaintenance {
  id          String   @id @default(uuid())
  prediction  Json
  createdAt   DateTime @default(now())
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String

  @@index([unitId])
}

// CostEstimation model
model CostEstimation {
  id          String    @id @default(uuid())
  estimation  Json
  createdAt   DateTime  @default(now())
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId String    @unique
}

// PhotoAnalysis model
model PhotoAnalysis {
  id                   String             @id @default(uuid())
  analysis             Json
  createdAt            DateTime           @default(now())
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String             @unique
}

// Communication model
model Communication {
  id        String   @id @default(uuid())
  channel   String
  content   String
  createdAt DateTime @default(now())
}

// MaintenanceRequestCategory model
model MaintenanceRequestCategory {
  id                  String               @id @default(uuid())
  name                String
  description         String?
  maintenanceRequests MaintenanceRequest[]
}

// EmergencyRoutingRule model
model EmergencyRoutingRule {
  id        String @id @default(uuid())
  rule      Json
  vendor    Vendor @relation(fields: [vendorId], references: [id])
  vendorId  String

  @@index([vendorId])
}

// MaintenanceResponseTime model
model MaintenanceResponseTime {
  id                   String             @id @default(uuid())
  responseTime         Int
  createdAt            DateTime           @default(now())
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestId], references: [id])
  maintenanceRequestId String             @unique
}

// ScheduledEvent model
model ScheduledEvent {
  id          String    @id @default(cuid())
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  workOrderId String    @unique
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Screening model
model Screening {
  id        String   @id @default(uuid())
  result    Json
  createdAt DateTime @default(now())
}

// RiskAssessment model
model RiskAssessment {
  id            String      @id @default(uuid())
  score         Float
  details       Json
  createdAt     DateTime    @default(now())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String      @unique
}

// TenantIssuePrediction model
model TenantIssuePrediction {
  id          String   @id @default(uuid())
  prediction  Json
  createdAt   DateTime @default(now())
  tenant      User     @relation(fields: [tenantId], references: [id])
  tenantId    String

  @@index([tenantId])
}

// DbOptimizationLog model
model DbOptimizationLog {
  id        String   @id @default(cuid())
  log       String
  createdAt DateTime @default(now())
}

model EscalationPolicy {
  id          String                 @id @default(cuid())
  name        String
  description String?
  property    Property               @relation(fields: [propertyId], references: [id])
  propertyId  String
  rules       EscalationPolicyRule[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model EscalationPolicyRule {
  id         String           @id @default(cuid())
  policy     EscalationPolicy @relation(fields: [policyId], references: [id])
  policyId   String
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  order      Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model BusinessHours {
  id         String   @id @default(cuid())
  dayOfWeek  Int // 0 for Sunday, 6 for Saturday
  openTime   String
  closeTime  String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model EmergencyProtocol {
  id          String   @id @default(cuid())
  name        String
  description String
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consent {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  granted   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Device {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  pushToken String
  platform  String // 'ios' or 'android'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VendorPayment {
  id             String                @id @default(cuid())
  workOrder      WorkOrder             @relation(fields: [workOrderId], references: [id])
  workOrderId    String
  vendor         Vendor                @relation(fields: [vendorId], references: [id])
  vendorId       String
  amount         Float
  status         String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  approvalStatus PaymentApprovalStatus @default(PENDING)
  approvedAt     DateTime?
  approvedBy     User?                 @relation("ApprovedVendorPayments", fields: [approvedById], references: [id])
  approvedById   String?
}

enum PaymentApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Feedback {
  id              String    @id @default(uuid())
  requestId       String
  isCorrect       Boolean
  correctedUrgency String?
  correctedType   String?
  createdAt       DateTime  @default(now())
}

model ModelPerformance {
    id          String @id @default(cuid())
    modelName   String
    accuracy    Float
    precision   Float
    recall      Float
    f1Score     Float
    recordedAt  DateTime @default(now())
}
