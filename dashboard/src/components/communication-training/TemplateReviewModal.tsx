import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  Typography,
  Box,
  TextField,
  Chip,
  Stack,
  Divider,
  Alert,
  Paper,
  IconButton
} from '@mui/material';
import {
  Close as CloseIcon,
  CheckCircle as ApproveIcon,
  Cancel as RejectIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import { CommunicationTemplate } from '../../types/communication-training';
import ConfidenceIndicator from '../../design-system/components/ai/ConfidenceIndicator';
import AIGeneratedContent from '../../design-system/components/ai/AIGeneratedContent';

interface TemplateReviewModalProps {
  open: boolean;
  template: CommunicationTemplate;
  onClose: () => void;
  onApprove: (comments?: string) => void;
  onReject: (comments: string) => void;
  isLoading?: boolean;
}

const TemplateReviewModal: React.FC<TemplateReviewModalProps> = ({
  open,
  template,
  onClose,
  onApprove,
  onReject,
  isLoading = false
}) => {
  const [reviewComments, setReviewComments] = useState('');
  const [action, setAction] = useState<'approve' | 'reject' | null>(null);

  const handleApprove = () => {
    setAction('approve');
  };

  const handleReject = () => {
    setAction('reject');
  };

  const handleConfirmAction = () => {
    if (action === 'approve') {
      onApprove(reviewComments || undefined);
    } else if (action === 'reject') {
      onReject(reviewComments || 'No specific reason provided');
    }
    // Reset state
    setAction(null);
    setReviewComments('');
  };

  const handleCancel = () => {
    setAction(null);
    setReviewComments('');
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }).format(new Date(date));
  };

  const getTriggerLabel = (trigger: string) => {
    return trigger.split('_').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
  };

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        sx: { minHeight: '60vh' }
      }}
    >
      <DialogTitle>
        <Box display="flex" alignItems="center" justifyContent="space-between">
          <Typography variant="h6" component="div">
            Review Template: {template.title}
          </Typography>
          <IconButton 
            onClick={onClose} 
            disabled={isLoading}
            aria-label="Close dialog"
          >
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent dividers>
        <Stack spacing={3}>
          {/* Template Metadata */}
          <Box>
            <Typography variant="subtitle2" gutterBottom>
              Template Information
            </Typography>
            <Stack direction="row" spacing={2} flexWrap="wrap" useFlexGap>
              <Chip label={`Category: ${template.category}`} variant="outlined" />
              <Chip label={`Trigger: ${getTriggerLabel(template.trigger)}`} variant="outlined" />
              <Chip 
                label={`Status: ${template.status.charAt(0).toUpperCase() + template.status.slice(1)}`} 
                color={template.status === 'pending' ? 'warning' : 'default'}
                variant="outlined" 
              />
            </Stack>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              Created by {template.createdBy} on {formatDate(template.createdAt)}
            </Typography>
          </Box>

          <Divider />

          {/* AI Confidence Score */}
          <Box>
            <Typography variant="subtitle2" gutterBottom>
              AI Confidence Score
            </Typography>
            <ConfidenceIndicator 
              confidence={template.confidence}
              showLabel
              explanation="This score indicates how confident the AI is in the quality and appropriateness of this template."
            />
          </Box>

          <Divider />

          {/* Template Content */}
          <Box>
            <Typography variant="subtitle2" gutterBottom>
              Template Content
            </Typography>
            <AIGeneratedContent
              confidence={template.confidence}
              explanation="This template was generated by AI based on the configured tone, style, and communication patterns."
            >
              <Paper 
                variant="outlined" 
                sx={{ 
                  p: 2, 
                  backgroundColor: 'grey.50',
                  border: '1px solid',
                  borderColor: 'primary.light',
                  borderRadius: 2
                }}
              >
                <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
                  {template.content}
                </Typography>
              </Paper>
            </AIGeneratedContent>
          </Box>

          {/* Review Guidelines */}
          <Alert severity="info" icon={<InfoIcon />}>
            <Typography variant="subtitle2" gutterBottom>
              Review Guidelines
            </Typography>
            <Typography variant="body2">
              • Ensure the template aligns with your communication standards<br />
              • Check for appropriate tone and professionalism<br />
              • Verify the content is relevant to the trigger scenario<br />
              • Consider fair housing compliance and legal requirements
            </Typography>
          </Alert>

          {/* Action Selection */}
          {action && (
            <Box>
              <Typography variant="subtitle2" gutterBottom>
                {action === 'approve' ? 'Approval Comments (Optional)' : 'Rejection Reason (Required)'}
              </Typography>
              <TextField
                fullWidth
                multiline
                rows={3}
                value={reviewComments}
                onChange={(e) => setReviewComments(e.target.value)}
                placeholder={
                  action === 'approve' 
                    ? 'Add any comments about the approval...' 
                    : 'Please provide a reason for rejection...'
                }
                error={action === 'reject' && !reviewComments.trim()}
                helperText={
                  action === 'reject' && !reviewComments.trim() 
                    ? 'Rejection reason is required' 
                    : ''
                }
              />
            </Box>
          )}
        </Stack>
      </DialogContent>

      <DialogActions sx={{ p: 2 }}>
        {!action ? (
          // Initial action buttons
          <Stack direction="row" spacing={2}>
            <Button
              onClick={onClose}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button
              onClick={handleReject}
              startIcon={<RejectIcon />}
              color="error"
              variant="outlined"
              disabled={isLoading}
            >
              Reject
            </Button>
            <Button
              onClick={handleApprove}
              startIcon={<ApproveIcon />}
              color="success"
              variant="contained"
              disabled={isLoading}
            >
              Approve
            </Button>
          </Stack>
        ) : (
          // Confirmation buttons
          <Stack direction="row" spacing={2}>
            <Button
              onClick={handleCancel}
              disabled={isLoading}
            >
              Back
            </Button>
            <Button
              onClick={handleConfirmAction}
              color={action === 'approve' ? 'success' : 'error'}
              variant="contained"
              disabled={
                isLoading || 
                (action === 'reject' && !reviewComments.trim())
              }
              startIcon={action === 'approve' ? <ApproveIcon /> : <RejectIcon />}
            >
              Confirm {action === 'approve' ? 'Approval' : 'Rejection'}
            </Button>
          </Stack>
        )}
      </DialogActions>
    </Dialog>
  );
};

export default TemplateReviewModal;